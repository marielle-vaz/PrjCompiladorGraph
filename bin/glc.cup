import java_cup.runtime.*;
import classes_graph.Graph;

parser code {:
    public Graph grafo;
    public boolean deveImprimir = false;
    private boolean tipoDefinido = false;

    public void syntax_error(Symbol s){
        this.defineError(s.left, s.right);
    }

    public void defineError(int line, int column, String text) {
        Yylex scanner = (Yylex) this.getScanner();
        scanner.defineError(line, column, text);
    }

    public void defineError(int linha, int coluna){
        Yylex scanner = (Yylex) this.getScanner();
        scanner.defineError(linha, coluna);
    }

    public void defineError(String text) {
        Yylex scanner = (Yylex) this.getScanner();
        scanner.defineError(text);
    }
:};

terminal GRAPH, colon, line, arrow, directed, undirected, print, vertex, edge;
terminal String ID, adjacency, invalido;

non terminal Inicio, TipoGrafo, ListaElementos, Elemento, Impressao;

start with Inicio;

Inicio ::= GRAPH colon TipoGrafo ListaElementos Impressao 
| error 
    {: 
        parser.defineError("Comando inicial inválido. Esperado: GRAPH:");
    :}
  ;

TipoGrafo ::= directed 
    {: 
        grafo = new Graph(true); 
        tipoDefinido = true;
    :}
  | undirected 
    {: 
        grafo = new Graph(false); 
        tipoDefinido = true;
    :}
  | error 
    {: 
        parser.defineError("Sintaxe inválida! O tipo deve ser directed ou undirected.");
    :}
  ;

ListaElementos ::= ListaElementos Elemento
                 | Elemento ;

Elemento ::= ID:id
  {:
    parser.defineError(idleft, idright, "Comando desconhecido ou incompleto: " + id);
  :}
  | vertex ID:id 
    {: 
        if (!tipoDefinido || grafo == null) {
            parser.defineError("Tipo de grafo não definido antes da criação de arestas.");
        } else if (grafo.hasVertex(id)) {
            parser.defineError(idleft, idright, "Vértice duplicado: " + id);
        } else {
            grafo.addVertex(id);
        }
    :}
  | edge ID:origem arrow ID:destino 
    {: 
        if (!tipoDefinido || grafo == null) {
            parser.defineError("Tipo de grafo não definido antes da criação de arestas.");
        } else if (!grafo.isDirected()) {
            parser.defineError(origemleft, destinoright, "Tipo de aresta inválido para o grafo atual: uso de '->' em grafo não direcionado.");
        } else if (!grafo.hasVertex(origem)) {
            parser.defineError(origemleft, origemright, "Vértice de origem não declarado: " + origem);
        } else if (!grafo.hasVertex(destino)) {
            parser.defineError(destinoleft, destinoright, "Vértice de destino não declarado: " + destino);
        } else if (grafo.hasEdge(origem, destino)) {
            parser.defineError(origemleft, destinoright, "Aresta duplicada: " + origem + " -> " + destino);
        } else {
            grafo.addEdge(origem, destino);
        }
    :}

  | edge ID:origem line ID:destino 
    {: 
        if (!tipoDefinido || grafo == null) {
            parser.defineError("Tipo de grafo não definido antes da criação de arestas.");
        } else if (grafo.isDirected()) {
            parser.defineError(origemleft, destinoright, "Tipo de aresta inválido para o grafo atual: uso de '--' em grafo direcionado.");
        } else if (!grafo.hasVertex(origem)) {
            parser.defineError(origemleft, origemright, "Vértice de origem não declarado: " + origem);
        } else if (!grafo.hasVertex(destino)) {
            parser.defineError(destinoleft, destinoright, "Vértice de destino não declarado: " + destino);
        } else if (grafo.hasEdge(origem, destino)) {
            parser.defineError(origemleft, destinoright, "Aresta duplicada: " + origem + " -- " + destino);
        } else {
            grafo.addEdge(origem, destino);
        }
    :}

    | invalido:inv
      {:
        parser.defineError("Comando desconhecido: " + inv);
      :}
    | error 
      {: 
        parser.defineError("Sintaxe inválida!");
      :}
  ;

Impressao ::= print adjacency 
    {: 
        deveImprimir = true; 
    :}
  | error 
    {: 
        parser.defineError("Elemento mal formado na chamada do 'print adjacency'");
    :}
  ;
