
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import classes_graph.Graph;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\004\000\002\004\003\000\002\005\003\000" +
    "\002\005\004\000\002\005\006\000\002\005\006\000\002" +
    "\005\003\000\002\005\003\000\002\006\004\000\002\006" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\006\003\004\004\005\001\002\000\004\002" +
    "\uffff\001\002\000\004\005\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\010\003\012\010" +
    "\013\011\011\001\002\000\014\003\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\017\ufffd\001\002\000\014\003\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\017\ufffc\001\002\000\014\003\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\017\ufffe\001\002\000\014\003\020\013" +
    "\023\014\022\015\015\017\021\001\002\000\016\003\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\017\ufff9\001\002\000" +
    "\016\003\034\012\032\013\023\014\022\015\015\017\021" +
    "\001\002\000\016\003\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\017\ufffa\001\002\000\016\003\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\017\ufff4\001\002\000\016\003\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5\001\002\000\004" +
    "\015\025\001\002\000\004\015\024\001\002\000\016\003" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\017\ufff8\001\002" +
    "\000\006\006\026\007\027\001\002\000\004\015\031\001" +
    "\002\000\004\015\030\001\002\000\016\003\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\017\ufff7\001\002\000\016\003" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6\001\002" +
    "\000\004\016\036\001\002\000\016\003\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\017\ufffb\001\002\000\020\002\ufff2" +
    "\003\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufff3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\015\005\016\001\001\000\002" +
    "\001\001\000\006\005\032\006\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Graph grafo;
    public boolean deveImprimir = false;
    private boolean tipoDefinido = false;

    public void syntax_error(Symbol s){
        this.defineError(s.left, s.right);
    }

    public void defineError(int line, int column, String text) {
        Yylex scanner = (Yylex) this.getScanner();
        scanner.defineError(line, column, text);
    }

    public void defineError(int linha, int coluna){
        Yylex scanner = (Yylex) this.getScanner();
        scanner.defineError(linha, coluna);
    }

    public void defineError(String text) {
        Yylex scanner = (Yylex) this.getScanner();
        scanner.defineError(text);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= GRAPH colon TipoGrafo ListaElementos Impressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= error 
            {
              Object RESULT =null;
		 
        parser.defineError("Comando inicial inválido. Esperado: GRAPH:");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TipoGrafo ::= directed 
            {
              Object RESULT =null;
		 
        grafo = new Graph(true); 
        tipoDefinido = true;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoGrafo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TipoGrafo ::= undirected 
            {
              Object RESULT =null;
		 
        grafo = new Graph(false); 
        tipoDefinido = true;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoGrafo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TipoGrafo ::= error 
            {
              Object RESULT =null;
		 
        parser.defineError("Sintaxe inválida! O tipo deve ser directed ou undirected.");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoGrafo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListaElementos ::= ListaElementos Elemento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaElementos",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListaElementos ::= Elemento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaElementos",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Elemento ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    parser.defineError(idleft, idright, "Comando desconhecido ou incompleto: " + id);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elemento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Elemento ::= vertex ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        if (!tipoDefinido || grafo == null) {
            parser.defineError("Tipo de grafo não definido antes da criação de arestas.");
        } else if (grafo.hasVertex(id)) {
            parser.defineError(idleft, idright, "Vértice duplicado: " + id);
        } else {
            grafo.addVertex(id);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elemento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Elemento ::= edge ID arrow ID 
            {
              Object RESULT =null;
		int origemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int origemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String origem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        if (!tipoDefinido || grafo == null) {
            parser.defineError("Tipo de grafo não definido antes da criação de arestas.");
        } else if (!grafo.isDirected()) {
            parser.defineError(origemleft, destinoright, "Tipo de aresta inválido para o grafo atual: uso de '->' em grafo não direcionado.");
        } else if (!grafo.hasVertex(origem)) {
            parser.defineError(origemleft, origemright, "Vértice de origem não declarado: " + origem);
        } else if (!grafo.hasVertex(destino)) {
            parser.defineError(destinoleft, destinoright, "Vértice de destino não declarado: " + destino);
        } else if (grafo.hasEdge(origem, destino)) {
            parser.defineError(origemleft, destinoright, "Aresta duplicada: " + origem + " -> " + destino);
        } else {
            grafo.addEdge(origem, destino);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elemento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Elemento ::= edge ID line ID 
            {
              Object RESULT =null;
		int origemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int origemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String origem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        if (!tipoDefinido || grafo == null) {
            parser.defineError("Tipo de grafo não definido antes da criação de arestas.");
        } else if (grafo.isDirected()) {
            parser.defineError(origemleft, destinoright, "Tipo de aresta inválido para o grafo atual: uso de '--' em grafo direcionado.");
        } else if (!grafo.hasVertex(origem)) {
            parser.defineError(origemleft, origemright, "Vértice de origem não declarado: " + origem);
        } else if (!grafo.hasVertex(destino)) {
            parser.defineError(destinoleft, destinoright, "Vértice de destino não declarado: " + destino);
        } else if (grafo.hasEdge(origem, destino)) {
            parser.defineError(origemleft, destinoright, "Aresta duplicada: " + origem + " -- " + destino);
        } else {
            grafo.addEdge(origem, destino);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elemento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Elemento ::= invalido 
            {
              Object RESULT =null;
		int invleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int invright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String inv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        parser.defineError("Comando desconhecido: " + inv);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elemento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Elemento ::= error 
            {
              Object RESULT =null;
		 
        parser.defineError("Sintaxe inválida!");
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elemento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Impressao ::= print adjacency 
            {
              Object RESULT =null;
		 
        deveImprimir = true; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Impressao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Impressao ::= error 
            {
              Object RESULT =null;
		 
        parser.defineError("Elemento mal formado na chamada do 'print adjacency'");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Impressao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
