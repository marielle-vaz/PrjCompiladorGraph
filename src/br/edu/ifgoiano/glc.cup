import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import Classes.Digrafo;
import Classes.Grafo;

parser code {:
    public Map<String, Set<String>> grafo = new HashMap<>();
    public Map<String, Set<String>> digrafo = new HashMap<>();
    String type;
    public boolean deveImprimir = false;
:};

terminal GRAPH, colon, line, arrow, directed, undirected, print, vertex, edge; 
terminal String ID, adjacency;
non terminal S, T, V1List, V1Element, V2List, V2Element, F;
start with S;

S ::= GRAPH colon T F;

T ::= directed V1List {: type = "digrafo"; :}
    | undirected V2List {: type = "grafo"; :}
    ;

V1List ::= V1List V1Element
         | V1Element;

V1Element ::= vertex ID:id 
    {: Digrafo.adicionarVertice(id, digrafo); :}
    | edge ID:origem arrow ID:destino
    {: Digrafo.adicionarAresta(origem, destino, digrafo); :}
    ;

V2List ::= V2List V2Element  
         | V2Element;

V2Element ::= vertex ID:id 
    {: Grafo.adicionarVertice(id, grafo); :}
    | edge ID:origem line ID:destino
    {: Grafo.adicionarAresta(origem, destino, grafo); :}
    ;

F ::= print adjacency {: deveImprimir = true; :}
     | ;
