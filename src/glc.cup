import java_cup.runtime.*;
import classes_graph.Graph;

parser code {:
    public Graph grafo;
    public boolean deveImprimir = false;

    public void syntax_error(Symbol s){
        this.defineError(s.left, s.right);
    }

    public void defineError(int line, int column, String text) {
        Yylex scanner = (Yylex) this.getScanner();
        scanner.defineError(line, column, text);
    }

    public void defineError(int linha, int coluna){
        Yylex scanner = (Yylex) this.getScanner();
        scanner.defineError(linha, coluna);
    }

    public void defineError(String text) {
        Yylex scanner = (Yylex) this.getScanner();
        scanner.defineError(text);
    }
:};

terminal GRAPH, colon, line, arrow, directed, undirected, print, vertex, edge; 
terminal String ID, adjacency;
non terminal S, G, VList, VElement, F;
start with S;

S ::= GRAPH colon G VList F;

G ::= directed {: grafo = new Graph(true); :}
   | undirected {: grafo = new Graph(false); :}
   | error {: parser.defineError("Sintaxe inválida! O tipo deve ser directed ou undirected"); :}
   ;

VList ::= VList VElement
        | VElement;

VElement ::= vertex ID:id 
    {: grafo.addVertex(id); :}
  | edge ID:origem arrow ID:destino 
    {: 
        if (!grafo.hasVertex(origem) || !grafo.hasVertex(destino)) {
            System.err.println("Erro: vértice inexistente usado na aresta: " + origem + " -> " + destino);
            System.exit(1);
        }
        if (grafo.hasEdge(origem, destino)) {
            System.err.println("Erro: aresta duplicada: " + origem + " -> " + destino);
            System.exit(1);
        }
        grafo.addEdge(origem, destino); 
    :}
  | edge ID:origem line ID:destino 
    {: 
        if (!grafo.hasVertex(origem) || !grafo.hasVertex(destino)) {
            System.err.println("Erro: vértice inexistente usado na aresta: " + origem + " - " + destino);
            System.exit(1);
        }
        if (grafo.hasEdge(origem, destino)) {
            System.err.println("Erro: aresta duplicada: " + origem + " - " + destino);
            System.exit(1);
        }
        grafo.addEdge(origem, destino); 
    :}
  ;


F ::= print adjacency 
    {: deveImprimir = true; :}
  | ;
